1.IOC=工厂模式+xml+java反射
2.IOC思想基于IOC容器完成的,底层就是对象工厂
3.IOC两种方式:
    1.BeanFactory:IOC容器基本实现,Spring内部使用,不提供开发人员使用。
                  加载配置文件不会创建对象,获取或者使用对象才去加载对象。
    2.ApplicationContext:是BeanFactory的子接口,提供更强大功能,给开发人员使用
                         加载配置文件就会创建对象
        两个主要实现类:ClassPathXmlApplicationContext:classpath路径
                     FileSystemXmlApplicationContext:系统盘路径
4.Bean管理(2个操作)
    1.Spring创建对象
    2.Spring依赖注入
        1.注入属性值
            1.set注入
            2.构造器注入
            3.p空间注入(了解)
        2.注入外部Bean和联级赋值
    3.Bean类型
        1.普通Bean
        2.工厂Bean
            1.创建一个工厂class作为工厂Bean,实现BeanFactory接口
            2.实现接口方法,定义方法内返回的bean类型
    4.Bean的作用域(scope)默认:单实例对象
        prototype:多实例对象  加载配置文件就会创建单例对象
        singleton:单实例对象  getBean时创建对象
    5.Bean的生命周期
        创建Bean实例->Bean的值和引用(Set)->(Bean实例传入后置处理器)->Bean的初始化->(Bean实例传入后置处理器)->对象获取->Bean销毁
        后置处理器:接口BeanPostProcessor
    6.自动装配:Autowire
        byName:根据属性名称
        byType:根据属性类型
    7.注解创建对象
        1.@Component 普通对象创建
        2.@Controller 控制层对象
        3.@Service 业务层对象
        4.@Repository 持久层对象
    8.实现属性注入
        1.@Autowired 根据属性类型自动注入，如果类型不止一个会根据名称注入
        2.@Qualifer 根据属性类型注入 需要在注解创建对象是给予名称
        3.@Resource 根据属性或者名称注入
        4.@Value 普通类型注入
5.AOP面向切面编程 降低程序耦合度,提供代码的重用性
    不修改源代码的前提下,增加新功能
6.AOP术语
    1.连接点:类哪些方法能被增强,这些方法就是连接点
    2.切入点:实际被真正被增强的方法就是切入点
    3.通知(增强):被增强的逻辑部分为通知
        类型:前置通知
            后置通知
            环绕通知
            异常通知
            最终通知
    4.切面:把通知应用到切入点的过程
7.切点表达式
    execution([权限修饰符][返回类型][类全路径][方法名称][参数列表])
8.JDBC_Template
    对jdbc进行封装,方便对数据库的操作
9.事务操作(基于AOP原理)
    事务是数据库操作最基本单元,是逻辑上的一组操作
    事务特性：(ACID)
        1.原子性
        2.一致性
        3.隔离性
        4.持久性
    方式:编程式事务管理和声明式事务管理
    @Transactional参数
        propagation 事务传播行为 多事务方法直接进行调用，事务是如何进行管理的(propagation=propagation.?)
            REQUIRED:A方法有事务,B方法无事务,A方法调用B方法,则B方法拥有A方法事务,A方法无事务,则会创建新的事务
            REQUIRED_NEW:A方法调用B方法,A方法无论是否有事务,都会创建一个新的事务运行
            SUPPORTS:A方法有事务,A调用B方法,B方法必须运行在A事务中,否则不可以运行在该事务中
            NOT_SUPPORT:A方法有事务,A调用B方法,则B方法挂起
            MANDATORY:方法运行必须要有事务,否则报错
            NEVER:方法不能运行在事务中,否则报错
            NESTED:A方法有事务,B方法嵌套在A事务中,如果A无事务,则B方法创建新事务运行
        ioslation 事务隔离级别 多事务操作之间产生影响(ioslation=ioslation.?)
            问题:如果不考虑会出现三个问题
                1.脏读:一个未提交的事务读取另一个未提交的事务数据
                2.不可重复读:一个未提交的事务读取另一个提交的事务数据
                3.幻读:一个未提交的事务读取另一个事务的提交数据
            隔离级别:                       问题
                READ UNCOMMITTED 读未提交   1,2,3
                READ COMMITTED  读已提交    2,3
                REPEATABLE READ 可重复读    3,
                SERIALIZABLE 串行化         无
        timeout 超时时间(默认值 -1s timeout=?s)
            设置事务在一定时间内需要提交,超出时间回滚
        realOnly 是否只读(true为只读)
        rollbackFor 回滚
        noRollbackFor 不回滚
10.spring5新特性
    @Nullable
        方法:方法返回值可以为空
        属性:属性值可以为空
        参数值:参数值为可以空
    函数式风格创建对象
        1.new GenericApplicationContext对象
        2.调用方法注册 refresh
                    registerBean("user",User.class,()->new User())
        3.getBean("全路径") 或上面指定名字   getBean("user")
11.WebFlux
    1.基于注解实现(两种)
        1.依赖
        2.端口
        3.entity service controller(@RestController)
    2.基于函数式编程实现
        需要自己初始化服务器 RouterFunction(实现路由功能,请求转发给对应的handler) and HandlerFunction(处理请求响应的函数)
        任务:定义两个函数接口,启动netty服务器
        1.创建 UserHandler
        2.创建 UserServer
            1.创建router方法
            2.配置路由
            3.创建服务器完成适配
                1.路由与handler适配
                2.创建服务器
            4.main方法调用Server
    同步异步:调用者
        同步:调用者发送请求,等着对方回应才去做其他事情
        异步:调用者发送请求,无需等待对方回应,去做其他事情
    阻塞非阻塞:被调用者
        非阻塞:被调用者收到请求,直接进行反馈
        阻塞;被调用者收到请求,不直接进行反馈,等做完事情再反馈
    3.Reactor
        1.Reactor满足Reactive框架
        2.Reactor有两个核心类,实现Publisher接口
            Flux:对象实现发布者,返回N个元素
            Mono:对象实现发布者,返回0或1个元素
        3.都可以发出3种信号,都是终止信号
            错误信号
            完成信号
            错误和完成信号
            信号特点:
                1.错误信号和完成信号都是终止信号，不能共存
                2.如果说发送任何元素值,而是直接发送错误或完成信号,表示空数据流
                3.如果没有错误和完成信号,表示无限数据流
        4.调用just或者其他方法只是声明数据流,数据流未发出,未订阅无法输出(subscribe)
        5.操作符
            map:元素映射为新元素
            flatMap:元素映射为流
        6.SpringWebFlux里的DispatcherHandler
            1.HandlerMapping 请求查询到处理的方法
            2.HandlerAdapter 真正负责请求处理
            3.HandlerResultHandler 响应结果处理
        7.api 实现函数式编程的两个接口 RouterHandler(路由处理) and HandlerFunction(函数处理)






