1.JVM回收如何确定垃圾，什么是GC Root？
    垃圾是内存中不再被使用
    判断:1.引用计数器
        2.GC Root:
             1.枚举根节点做可达性分析
             从GC Root对象作为起点，如果一个对象到GC Root 没有任何引用相连接,则该对象不可用。
             遍历到(存活),不能遍历到(死亡)
             2.GC Root 对象
                1.虚拟机栈(局部变量表)
                2.方法区的静态属性引用的对象
                3.方法区常量引用的对象
                4.本地方法栈中JNI(Native)引用的对象
2.JVM的参数类型(FROM .. TO..)？
    1.标配参数
        java -version
        java -help
        java -showversion
    2.x参数
        -Xint   解释执行
        -Xcomp  第一次使用就编译成本地代码
        -Xmixed 混合模式
    3.xx参数
        如何查看是否开启:
        jps+jinfo : jsp -l ||  jinfo -flag 配置项 进程编号 || jinfo -flags
        Boolean类型
            公式: -XX:+或-
                +:开启 -:关闭
            case:
                是否打印GC的收集细节:-XX:+PrintGCDetails(开启)
                                                  YoungGC后新生代内存占用       GC后堆内存          GC耗时
                                                                |                    |             |
                    [GC(Allocation Failure) [PSYoungGen 2048k->496k(2560k)] 2048k->777k(9728k),0.0042229 secs] [Times:user=0.00 sys=0.00 ,real=0.00secs
                      |                                   |           |       |           |                             |        |          |
                    GC类型(young or old)             YoungGC前新生代内存占用  新生代总共大小  GC前堆内存   堆内存总和                   GC用户耗时 GC系统耗时 GC实际耗时
                      |
                    FullGC或GC
                是否使用串行垃圾回收器:-XX:+UseSerialGC(开启)
                是否打印初始值: java -XX:+PrintFlagsInitial
                是否查看修改更新: java -XX:+PrintFlagsFinal -version  ||  = 与:=区别 :=人为改过或JVM的初始不同而修改
                是否打印命令行参数:java -XX:PrintCommandLineFlags

        KV类型
            公式:-XX:属性key=属性value
            case:
                -XX:MetaspaceSize=128m 设置元空间大小 元空间不在虚拟机,在本机内存中
                -XX:MaxTenuringThreshold=15 设置新生代极限年龄 0~15之间
                -XX:InitialHeapSize 设置初始化堆大小  等价于-Xms
                -XX:MaxHeapSize 设置最大堆大小 等价于-Xmx
                -XX:ThreadStackSize 设置单个线程栈的大小,一般默认为512k~1024k 等价于 -Xss | ThreadStackSize=0代表初始值:linux 1024k
                -XX:SurvivorRatio=4 | Eden:S0:S1=4:1:1 设置新生代中eden和s0/s1空间比例 默认8:1:1
                -XX:NewRatio 设置新生代和老年代的比例
                -XX:MaxDirectMemorySize
3.强,软,弱,虚引用?
    ReferenceQueue
        对象回收时会放入队列保存
    1.强引用:JVM垃圾回收,出现了OOM,也不会回收强引用，经常会导致内存泄漏的原因之一
    2.软引用:内存足够时，不回收，内存不足时，回收
    3.弱引用:无论内存是否足够,只要是弱引用,就进行回收
        软，弱适用场景:缓存 加载大量图片
        WeakHashMap
    4.虚引用:如果一个对象持有虚引用,那么它就和没有引用一样,随时会被垃圾回收器回收，必须和一个ReferenceQueue一起使用
      get方法总是返回null，主要为了对象回收的监控
4.oom的认识？
    1.StackOverFlowError: 栈溢出
    2.oom->java heap space: 堆溢出
    3.oom->GC overhead limit exceeded:超出GC极限，GC回收时间过长
    4.oom->unable to create new native thread：不能创建更多线程
    5.oom->metaspace :元空间
5.垃圾回收器?
    GC算法的落地实现
    垃圾回收方式:
        1.Serial 串行回收 为单线程程序设计一个GC线程，当GC线程运行时，其他线程会暂停，等GC线程运行完成,其他线程继续运行 不适合服务器环境
        2.Parallel 并行回收 多个GC线程进行垃圾回收，其他线程也是暂停的,适合科学计算和大数据处理。
        3.CMS(ConcMarkSweep) 并发标记清除 用户线程与GC线程同时执行(可能交替执行) ,不需要用户线程暂停 适应于对响应时间的场景
        4.G1
    七种垃圾回收器:
        参数:
            DefNew->Default New Generation
            Tenured->Old
            ParNew->Parallel New Generation
            PSYoung->Parallel Scavenge
            ParOldGen->Parallel Old Generation
        新生代
        1.-XX:+UseSerialGC (Serial Copying)     ->Serial+Serial Old   复制+标整
        2.-XX:+UseParNewGC                      ->ParNew+Serial Old(Java8不在推荐使用)  复制+标整
        3.-XX:+UseParallelGC(Parallel Scavenge) ->ParallelGC+ParallelOldGC 复制+标整
           ParNewGC与ParallelGCb比较
                1.可控制的吞吐量
                2.自适应调节策略
        老年代
        4.-XX:+UseParallelOldGC                 ->ParallelGC+ParallelOldGC  复制+标整
        5.-XX:+UseConcMarkSweep(CMS)            ->ParNew+CMS+serial Old(做为CMS出错的后备收集器)  复制+标清
            四步过程:
                1.初始标记(CMS initial Mark) 标记GC Roots直接关联的对象,速度快,但要暂停所有工作线程
                2.并发标记(CMS Concurrent Mark) 进行GC Roots的跟踪工作,和工作线程一起,标记对象
                3.重新标记(CMS remark) 修正并发标记期间,因程序运行产生变动的那部分对象的标记记录,暂停所有工作线程,在正式清理前还需修正
                4.并发清除(CMS Concurrent Sweep)清除GC Root不可达的对象,与工作线程一起
            优缺点:
                优:1.并发收集低停顿
                缺:1.(CPU资源压力大)CMS会增加堆内存的占有,CMS必须要在老年代堆内存用尽之前完成垃圾回收,
                     CMS一旦失败,触发保底,使用Serial Old 收集器,会造成一次大停顿
                   2.采用的标记清除会导致大量碎片
        7.-XX:+UseSerialOldGC(1.8后被优化)
        新/老
        6.-XX:+UseG1GC 新生代（整体上 标整 局部上 复制）
        配置:
            -XX:ParallelGCThreads=数字n  配置n个GC线程
                CPU大于8  n=5/8
                CPU小于8  n=实际个数
        选择垃圾收集器:
            单CPU或小内存,单机程序
            -XX:+UseSerialGC
            多CPU,需要最大吞吐量,如后台计算型应用
            -XX:+UseParallelGC
            -XX:+UseParallelOldGC
            多CPU,追求低停顿,需要快速响应互联网应用
            -XX:+UseConcMarkSweepGC
            -XX:+UseParNewGC
6.G1收集器
    以前收集器的特点:
        1.年轻代与老年代是各自独立连续的内存块
        2.年轻代收集分成EDen+S0+S1的复制算法
        3.老年代必须扫描整个老年代区域
        4.都是以尽可能少+速度快的GC设计原则
     G1特点:(避免全内存扫描,只进行区域扫描)
        1.充分利用多CPU、多核的硬件优势,尽量缩小STW
        2.G1整体采用标记-整理,局部使用复制算法,不会产生内存碎片
        3.把内存划分成多个子独立区
        4.内存变成整体,但局部范围进行年轻代和老年代的区分
        5.物理上不在区分年轻代和老年代,逻辑上区分
     G1区域划分:
        1.Eden
        2.survivor
        3.Old
        4.Humongous
     G1收集步骤:
        1.初始标记:只标记GC Roots能直接关联到的对象
        2.并发标记:进行GC Roots Tracing的过程
        3.最终标记:修正并发标记期间,导致标记发生变化的那一部分对象
        4.筛选回收:根据时间来进行价值最大化回收
     参数:
        -XX:+UseG1GC 新生代（整体上 标整 局部上 复制）
        -XX:G1HeapRegionSize=n 设置G1区域的大小 ,值为2的幂次方 1~32 划分2048个区域
        -XX:MaxGCPauseMillis=n 设置最大GC停顿时间
        -XX:InitiatingHeapOccupancyPercent=n 设置堆占用了多少的时候触发GC 默认45
        -XX:ConcGCThread=n 并发GC使用的线程数
        -XX:G1ReservePercent=n 设置作为空闲空间的预留内存百分比 默认是10%
     优势(与CMS):
        1.无碎片
        2.精确控制停顿


