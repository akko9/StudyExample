补充:
依赖关系（Dependence）：假设A类的变化引起了B类的变化，则说名B类依赖于A类。
化关系（Generalization）：A是B和C的父类，B,C具有公共类（父类）A，说明A是B,C的一般化（概括，也称泛化）
关联关系（Association）:类之间的联系，如客户和订单，每个订单对应特定的客户，每个客户对应一些特定的订单
聚合关系（Aggregation）:表示的是整体和部分的关系，整体与部分 可以分开.
组合关系（Composition）:也是整体与部分的关系，但是整体与部分不可以分开.
实现关系（Implementation）：是用来规定接口和实线接口的类或者构建结构的关系，接口是操作的集合，而这些操作就用于规定类或者构建的一种服务。
1.七大设计原则
    1.单一职责:一个方法只做一件事
    2.接口隔离:接口功能最小化
    3.依赖反转:抽象不应该依赖细节,细节应该依赖抽象
    4.里氏替换:在子类中尽量不要重写父类的方法,可以通过聚合,组合,依赖解决。
    5.开闭原则:对扩展开放,对修改关闭
    6.迪米特法则:只有直接朋友通信
    7.合成复用
2.设计模式分类
    1.创建型:单例模式
    2.结构型:
    3.行为型:
3.单例模式:
    解决需要频繁创建和销毁的对象，重量型的对象，工具类对象
4.工厂模式:
    结构复杂度: simple
    代码复杂度: simple
    编程复杂度: simple
    管理复杂度: simple
    设计原则:工厂模式  实际生产:简单工厂
5.抽象工厂模式
    优点:代码隔离,无需关系创建细节
        将一个系列的产品放在一起创建
    缺点:规定了所有可能创建的产品集合,产品扩展困难
        增加了系统的抽象性和理解难度
6.适配器模式
    1.类适配器 source需要继承类,容易暴露类方法,实现target方法
    2.对象适配器 组合代替继承
    3.接口适配器 不需要实现接口全部方法,先实现抽象类,抽象类的子类可以选择覆盖
    作用:接口兼容
7.原型模式
    原型模式使用原型实例指定创建对象的种类,并且通过拷贝原型对象创建新的对象
    浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，
        对于数据类型是基本类型:值传递
        对于数据类型是引用类型:引用传递(数组)(某个类里的对象)
            在一个instance中修改该成员变量,则会影响其他instance的值
    深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，
        1.可以重写clone()方法
        2.通过对象序列化实现深拷贝
    优点:1.创建想对象比较复杂,原型模式简化创建对象的过程
         2.不用初始化对象,动态获得对象运行的状态
         3.原始对象发生变化,克隆对象发生变化
    缺点:1.需要为每个类配备一个克隆方法,对已有的类进行改造要修改源代码,违背ocp原则(开闭原则)
8.观察者模式
    1.普通方法
        当增加第三方时,需要创建第三方对象加入dataChange方法中,违反了ocp
    2.观察者模式
        通过注册,移除,通知来管理observer,数据类型(集合)，无需修改核心类
    3.Observable等价于我们创建的subject
      Observable是类,已经实现了核心方法,如何想实现Observable方法,继承就行
      Observer相当于我们写的Observer
9.建造者模式
   主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；
   由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
   四个核心角色:
    1.Product 产品
    2.Builder 建造者
    3.ConcreteBuilder :具体建造者
    4.commander :指挥者
    多个零件对象组成一个产品
10.桥接模式
    桥接模式即将抽象部分与它的实现部分分离开来，使他们都可以独立变化。
    桥接模式将继承关系转化成关联关系，它降低了类与类之间的耦合度，减少了系统中类的数量，也减少了代码量。